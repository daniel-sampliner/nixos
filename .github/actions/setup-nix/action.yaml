# SPDX-FileCopyrightText: 2024 Daniel Sampliner <samplinerD@gmail.com>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

name: setup-nix

inputs:
  extra_substituters:
    required: false
  name:
    required: true
  nix_public_key:
    required: true
  nix_secret_key:
    required: true

outputs:
  cache-hit:
    value: ${{ steps.cache.outputs.cache-hit }}
  cache_dir:
    value: ${{ steps.save-cache-url.outputs.cache_dir }}
  cache_url:
    value: ${{ steps.save-cache-url.outputs.cache_url }}

runs:
  using: composite
  steps:
    - shell: bash --noprofile --norc -eu {0}
      name: validate inputs
      env:
        INPUTS: ${{ toJSON(inputs) }}
      run: |
        while IFS=$'\t' read -r key value; do
          if [[ -z $value ]]; then
            echo "missing required input: $key" >&2
            ret=1
          fi
        done \
          < <(echo "$INPUTS" \
            | jq -er 'to_entries[]
              | select(.key != "extra_substituters")
              | [.key, .value]
              | @tsv')

        exit "${ret:-0}"

    - shell: bash --noprofile --norc -eu {0}
      name: sanitize name
      id: sanitize-name
      env:
        NAME: ${{ inputs.name }}
      run: |
        name=$(echo -n "${NAME:?}" | tr -sc '[:alnum:]' '-')
        echo "name=${name:?}" >>"${GITHUB_OUTPUT:?}"

    - shell: bash --noprofile --norc -eu {0}
      name: save cache url
      id: save-cache-url
      env:
        NAME: ${{ steps.sanitize-name.outputs.name }}
      run: |
        CACHE_DIR="${RUNNER_TEMP:?}/cache-${NAME:?}"
        CACHE_URL="file://$CACHE_DIR?compression=zstd&parallel-compression=true&priority=0"
        ARCHIVE_CACHE_DIR="${RUNNER_TEMP:?}/flake-archive"
        ARCHIVE_CACHE_URL="file://$ARCHIVE_CACHE_DIR?compression=zstd&parallel-compression=true&priority=0"
        {
          echo "CACHE_DIR=$CACHE_DIR"
          echo "CACHE_URL=$CACHE_URL"
          echo "ARCHIVE_CACHE_DIR=$ARCHIVE_CACHE_DIR"
          echo "ARCHIVE_CACHE_URL=$ARCHIVE_CACHE_URL"
        } >>"${GITHUB_ENV:?}"

        {
          echo "cache_dir=$CACHE_DIR"
          echo "cache_url=$CACHE_URL"
        } >>"${GITHUB_OUTPUT:?}"

    - uses: actions/cache@v4
      id: cache
      with:
        path: |
          ${{ env.CACHE_DIR }}
          ~/.cache/nix
        key: nix-${{ steps.sanitize-name.outputs.name }}-${{ hashFiles('flake.lock') }}
        restore-keys: |
          nix-${{ steps.sanitize-name.outputs.name }}-
          nix-

    - uses: actions/cache@v4
      id: cache-flake-archive
      with:
        path: ${{ env.ARCHIVE_CACHE_DIR }}
        key: nix-flake-archive-${{ hashFiles('flake.lock') }}

    - shell: bash --noprofile --norc -eu {0}
      name: configure nix signing key
      env:
        NIX_SECRET_KEY: ${{ inputs.nix_secret_key }}
      run: |
        echo "${NIX_SECRET_KEY:?}" >>"${RUNNER_TEMP:?}"/secret-key

    - uses: DeterminateSystems/nix-installer-action@v4
      with:
        extra-conf: |
          secret-key-files = ${{ runner.temp }}/secret-key
          extra-substituters = ${{ env.ARCHIVE_CACHE_URL }} ${{ env.CACHE_URL }} ${{ inputs.extra_substituters }}
          extra-trusted-public-keys = ${{ inputs.nix_public_key }}

    - shell: bash --noprofile --norc -eu {0}
      name: cache flake archive
      if: ${{ steps.cache-flake-archive.outputs.cache-hit != 'true' }}
      run: |
        sudo $(command -v nix) flake archive --to "${ARCHIVE_CACHE_URL:?}" .
