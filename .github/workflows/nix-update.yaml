# SPDX-FileCopyrightText: 2024 - 2025 Daniel Sampliner <samplinerD@gmail.com>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

name: nix-update

on:
  schedule:
    - cron: '0 0 * * *'

  workflow_dispatch:

  push:
    branches:
      - 'nix-flake-update-gha'

concurrency:
  cancel-in-progress: true
  group: ${{github.workflow}}

jobs:
  gen-matrix:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.list-updateables.outputs.packages }}

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v30
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ github.repository_owner }}
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}

      - name: list updateable packages
        id: list-updateables
        run: |
          system=$(nix config show system)
          {
            echo -n "packages="
            nix eval --json ".#github.${system:?}.updateables"
          } | tee -a "${GITHUB_OUTPUT:?}"

  update:
    runs-on: ubuntu-latest
    needs: gen-matrix
    permissions:
      contents: write
      pull-requests: write

    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.gen-matrix.outputs.packages) }}

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v30
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ github.repository_owner }}
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}

      - name: build/fetch updateScript
        env:
          BUILD: ${{ matrix.package.build }}
        run: |-
          nix -L build --keep-going --no-link "${BUILD:?}"

      - name: update
        id: update
        env:
          UPDATE_SCRIPT: ${{ toJSON(matrix.package.updateScript) }}
          UPDATE_NIX_ATTR_PATH: ${{ matrix.package.name }}
        run: |-
          old_version=$(nix eval --raw ".#${UPDATE_NIX_ATTR_PATH:?}.version")
          if [[ -z "$old_version" ]]; then
            echo "::error ::could not determine old version of $UPDATE_NIX_ATTR_PATH" >&2
            exit 1
          fi

          IFS=$'\t' read -ra args < <(
            <<<"$UPDATE_SCRIPT" jq -r --arg PWD "${PWD:?}" '
              map(sub("/homeless-shelter/"; $PWD + "/"))
                + ["-F"]
              | @tsv
            '
          )

          "${args[@]}"

          if ! git status --porcelain=v2 | grep -q '^1'; then
            echo "changed=false" | tee -a "${GITHUB_OUTPUT:?}"
            exit 0
          fi

          new_version=$(nix eval --raw ".#${UPDATE_NIX_ATTR_PATH:?}.version")
          if [[ -z "$new_version" ]]; then
            echo "::error ::could not determine new version of $UPDATE_NIX_ATTR_PATH" >&2
            exit 1
          fi

          {
            echo "#### $UPDATE_NIX_ATTR_PATH: $old_version -> $new_version"
            echo "```diff"
            git diff
            echo "```"
          } | tee -a "${GITHUB_STEP_SUMMARY:?}"

          {
            echo "changed=true"
            echo "old_version=$old_version"
            echo "new_version=$new_version"
          } | tee -a "${GITHUB_OUTPUT:?}"

      - uses: actions/create-github-app-token@v1
        id: app-token
        if: ${{ steps.update.outputs.changed == 'true' }}
        with:
          app-id: ${{ vars.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}

      - name: commit
        if: ${{ steps.update.outputs.changed == 'true' }}
        env:
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          OLD_VERSION: ${{ steps.update.outputs.old_version }}
          NEW_VERSION: ${{ steps.update.outputs.new_version }}
          NAME: ${{ matrix.package.name }}
        run: |
          user_id=$(gh api "/users/${APP_SLUG:?}[bot]" --jq .id)
          git config --local user.name "${APP_SLUG}[bot]"
          git config --local user.email "${user_id:?}+${APP_SLUG}[bot]@users.noreply.github.com"

          readonly branch="nix-update/${NAME:?}"
          git switch -C "$branch" HEAD
          git push --set-upstream origin --force "$branch"

          args=()
          while read -r _ _ _ _ _ _ _ _ path _; do
            b64=$(base64 -w0 "${path:?}")
            args+=("-F" "files[][path]=$path" "-F" "files[][contents]=${b64:?}")
          done < <(git status --porcelain=v2)

          gh api graphql \
            -F githubRepository="${GITHUB_REPOSITORY:?}" \
            -F branchName="$branch" \
            -F expectedHeadOid="$(git rev-parse HEAD)" \
            -F commitMessage="feat(${NAME:?}): ${OLD_VERSION:?} -> ${NEW_VERSION:?}" \
            "${args[@]}" \
            -F 'query=@.github/api/createCommitOnBranch.gqls' \
            && echo

          git stash

      - name: open/update PR
        if: ${{ steps.update.outputs.changed == 'true' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          NAME: ${{ matrix.package.name }}
        run: |-
          git pull

          cmd=create
          if gh pr view >/dev/null; then
            cmd=edit
          fi

          gh pr "${cmd:?}" \
            --title "$(git log -1 --format=%s)" \
            --body-file <(git log -1 --format=%b)

  flake-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v30
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ github.repository_owner }}
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}

      - name: update
        id: update
        run: |
          nix flake update

          if ! git status --porcelain=v2 | grep -q '^1'; then
            echo "changed=false" | tee -a "${GITHUB_OUTPUT:?}"
            exit 0
          fi

          echo "changed=true" | tee -a "${GITHUB_OUTPUT:?}"

      - uses: actions/create-github-app-token@v1
        id: app-token
        if: ${{ steps.update.outputs.changed == 'true' }}
        with:
          app-id: ${{ vars.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}

      - name: commit and raise PR
        if: ${{ steps.update.outputs.changed == 'true' }}
        env:
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          BRANCH: nix-flake-update
          COMMIT_HEADLINE: "chore(nix): update inputs"
        run: |-
          COMMIT_BODY_FILE=<(
            GIT_EXTERNAL_DIFF='jd() { nix run nixpkgs#jd-diff-patch -- -git-diff-driver -f patch "$@"; } jd'
            GIT_EXTERNAL_DIFF="$GIT_EXTERNAL_DIFF" git diff \
              | jq -r '
                map(select(.op == "add").path
                | split("/")[2])
                | unique
                | map("* " + .)[]
              '
          ) nix run -- .#gh-raise-pr
