# SPDX-FileCopyrightText: 2024 - 2025 Daniel Sampliner <samplinerD@gmail.com>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

name: nix-update

on:
  schedule:
    - cron: '0 0 * * *'

  push:
    branches:
      - nix-update-all

  workflow_dispatch:

concurrency:
  cancel-in-progress: true
  group: ${{github.workflow}}

env:
  BRANCH: ${{ github.workflow }}/temp

jobs:
  flake-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v30
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ github.repository_owner }}
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}

      - name: create and push branch
        run: |
          git switch -C "${BRANCH:?}" HEAD
          git push --set-upstream origin --force "$BRANCH"

      - name: build/fetch gh-commit script
        run: |
          path=$(nix build --no-link --print-out-paths .#gh-commit) || exit 1
          echo "${path:?}/bin" >>"${GITHUB_PATH:?}"

      - name: update
        id: update
        run: |
          nix -L flake update \
            2> >(sed -u '/Updated input/,/â†’/w '"${RUNNER_TEMP:?}/commit_body" >&2)

          if ! git status --porcelain=v2 | grep -q '^1'; then
            echo "changed=false" | tee -a "${GITHUB_OUTPUT:?}"
            exit 0
          fi

          {
            echo '```'
            cat "${RUNNER_TEMP:?}/commit_body"
            echo '```'
          } >>"${GITHUB_STEP_SUMMARY:?}"

          echo "changed=true" | tee -a "${GITHUB_OUTPUT:?}"

      - uses: actions/create-github-app-token@v1
        id: app-token
        if: ${{ steps.update.outputs.changed == 'true' }}
        with:
          app-id: ${{ vars.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}

      - name: commit
        if: ${{ steps.update.outputs.changed == 'true' }}
        env:
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          COMMIT_HEADLINE: "chore(nix): update inputs"
        run: |
          COMMIT_BODY_FILE="${RUNNER_TEMP:?}/commit_body" gh-commit

  gen-matrix:
    runs-on: ubuntu-latest
    outputs:
      nixpkgs: ${{ steps.nixpkgs-path.outputs.nixpkgs }}
      packages: ${{ steps.list-updateables.outputs.packages }}

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v30
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ github.repository_owner }}
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}

      - name: list updateable packages
        id: list-updateables
        run: |
          system=$(nix config show system)
          {
            echo -n "packages="
            nix eval --json ".#github.${system:?}.updateables"
          } | tee -a "${GITHUB_OUTPUT:?}"

      - name: get nixpkgs path
        id: nixpkgs-path
        run: |
          {
            echo -n "nixpkgs="
            nix eval --raw '.#inputs.nixpkgs.outPath'
            echo
          } | tee -a "${GITHUB_OUTPUT:?}"

  update:
    runs-on: ubuntu-latest
    needs:
      - flake-update
      - gen-matrix

    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.gen-matrix.outputs.packages) }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}

      - uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=${{ needs.gen-matrix.outputs.nixpkgs }}

      - uses: cachix/cachix-action@v15
        with:
          name: ${{ github.repository_owner }}
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}

      - name: build/fetch updateScript
        env:
          BUILD: ${{ matrix.package.build }}
        run: |-
          nix -L build --keep-going --no-link "${BUILD:?}"

      - name: update
        id: update
        env:
          UPDATE_SCRIPT: ${{ toJSON(matrix.package.updateScript) }}
          UPDATE_NIX_ATTR_PATH: ${{ matrix.package.name }}
        run: |-
          old_version=$(nix eval --raw ".#${UPDATE_NIX_ATTR_PATH:?}.version")
          if [[ -z "$old_version" ]]; then
            echo "::error ::could not determine old version of $UPDATE_NIX_ATTR_PATH" >&2
            exit 1
          fi

          IFS=$'\t' read -ra args < <(
            <<<"$UPDATE_SCRIPT" jq -r --arg PWD "${PWD:?}" '
              map(sub("/homeless-shelter/"; $PWD + "/"))
                + ["-F"]
              | @tsv
            '
          )

          "${args[@]}"

          if ! git status --porcelain=v2 | grep -q '^1'; then
            echo "changed=false" | tee -a "${GITHUB_OUTPUT:?}"
            exit 0
          fi

          new_version=$(nix eval --raw ".#${UPDATE_NIX_ATTR_PATH:?}.version")
          if [[ -z "$new_version" ]]; then
            echo "::error ::could not determine new version of $UPDATE_NIX_ATTR_PATH" >&2
            exit 1
          fi

          {
            echo "#### $UPDATE_NIX_ATTR_PATH: $old_version -> $new_version"
            echo '```diff'
            git diff
            echo '```'
          } | tee -a "${GITHUB_STEP_SUMMARY:?}"

          {
            echo "changed=true"
            echo "old_version=$old_version"
            echo "new_version=$new_version"
          } | tee -a "${GITHUB_OUTPUT:?}"

      - uses: actions/create-github-app-token@v1
        id: app-token
        if: ${{ steps.update.outputs.changed == 'true' }}
        with:
          app-id: ${{ vars.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}

      - name: commit
        if: ${{ steps.update.outputs.changed == 'true' }}
        env:
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

          COMMIT_HEADLINE: >-
            feat(${{ matrix.package.name }}):
            ${{ steps.update.outputs.old_version }}
            -> ${{ steps.update.outputs.new_version }}

          JOB_INDEX: ${{ strategy.job-index }}
        run: |
          nix run -- .#gh-bot-config
          git commit --all -m "${COMMIT_HEADLINE:?}"
          git format-patch \
            --output-directory "${RUNNER_TEMP:?}/patches" \
            --start-number "${JOB_INDEX:?}" \
            "origin/${BRANCH:?}"

      - uses: actions/upload-artifact@v4
        if: ${{ steps.update.outputs.changed == 'true' }}
        with:
          name: ${{ github.workflow }}-${{ matrix.package.name }}
          path: ${{ runner.temp }}/patches
          if-no-files-found: error
          retention-days: 1

  raise-pr:
    runs-on: ubuntu-latest
    needs:
      - flake-update
      - update

    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        id: checkout

      - uses: actions/download-artifact@v4
        id: download-artifact
        with:
          path: ${{ runner.temp }}/patches
          merge-multiple: true

      - uses: cachix/install-nix-action@v30
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ github.repository_owner }}
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}

      - name: apply patches
        id: patch
        env:
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          ORIG_COMMIT: ${{ steps.checkout.outputs.commit }}
          PATCHES_DIR: ${{ steps.download-artifact.outputs.download-path }}
          PR_BRANCH: ${{ github.workflow }}
        run: |-
          set -x

          git fetch --no-tags --no-recurse-submodules origin "${BRANCH:?}"
          git switch "$BRANCH"

          nix run -- .#gh-bot-config
          for p in "${PATCHES_DIR:?}"/*.patch; do
            [[ -e $p ]] || continue

            if ! command -v gh-commit >/dev/null; then
              gh_commit=$(nix build --no-link --print-out-paths .#gh-commit) || exit 1
              export PATH="${gh_commit:?}/bin:$PATH"
            fi

            git am <"$p"
            git reset --soft HEAD~

            COMMIT_HEADLINE="$(git log -1 --format='%s' 'HEAD@{1}')" \
            COMMIT_BODY_FILE=<(git log -1 --format='%b' 'HEAD@{1}') \
              gh-commit

            git reset --hard HEAD
            git pull --no-tags --no-recurse-submodules --quiet origin "$BRANCH"
          done

          if git diff --quiet "${ORIG_COMMIT:?}..."; then
            exit 0
          fi

          git branch -m "${PR_BRANCH:?}"
          git push origin ":$BRANCH" "$PR_BRANCH:$PR_BRANCH"
