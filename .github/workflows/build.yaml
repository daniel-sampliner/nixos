# SPDX-FileCopyrightText: 2024 Daniel Sampliner <samplinerD@gmail.com>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

name: build

on:
  push:
    paths:
      - '**'
      - '!.github/**'
      - '.github/workflows/build.yaml'
    branches:
      - '**'

  workflow_dispatch:

concurrency:
  cancel-in-progress: true
  group: >-
    ${{ github.workflow }}-
    ${{ github.ref_name == 'main'
      && github.ref
      || github.sha }}

jobs:
  cache-flake:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v30
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ github.repository_owner }}
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
          skipPush: true

      - name: cache flake
        run: |
          nix flake archive --json \
            | jq -r '.path, (.inputs | to_entries[].value.path)' \
            | cachix push "${GITHUB_REPOSITORY_OWNER:?}"

  cachix-pushfilter:
    runs-on: ubuntu-latest
    outputs:
      regexp: ${{ steps.pushfilter.outputs.regexp }}

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v30
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ github.repository_owner }}
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
          skipPush: true

      - name: evaluate push filter
        id: pushfilter
        run: |
          system=$(nix config show system)
          regexp=$(nix eval --raw ".#github.${system:?}.cachixPushFilter")
          echo "regexp=${regexp:?}" | tee -a "${GITHUB_OUTPUT:?}"

  gen-matrix:
    runs-on: ubuntu-latest
    outputs:
      checks: ${{ steps.list-flake-outputs.outputs.checks }}
      containers: ${{ steps.list-flake-outputs.outputs.containers }}

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v30
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ github.repository_owner }}
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
          skipPush: true

      - name: list flake outputs
        id: list-flake-outputs
        run: |
          system=$(nix config show system)

          for attr in checks containers; do
            echo "$attr=$(nix eval --json ".#github.${system:?}.${attr:?}")"
          done | tee -a "${GITHUB_OUTPUT:?}"

  flake-check:
    runs-on: ubuntu-latest
    needs:
      - cachix-pushfilter
      - gen-matrix

    strategy:
      fail-fast: false
      matrix:
        installable: ${{ fromJSON(needs.gen-matrix.outputs.checks) }}
    env:
      INSTALLABLE: ${{ matrix.installable }}

    steps:
      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v30
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ github.repository_owner }}
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
          pushFilter: ${{ needs.cachix-pushfilter.outputs.regexp }}

      - name: check binary cache
        id: binary-cache
        run: |
          hit=false
          if nix path-info --eval-store auto --store "https://${GITHUB_REPOSITORY_OWNER:?}.cachix.org" "${INSTALLABLE:?}"; then
            hit=true
          fi
          echo "cache-hit=$hit" | tee -a "${GITHUB_OUTPUT:?}"

      - name: check
        if: ${{ steps.binary-cache.outputs.cache-hit != 'true' }}
        run: |
          nix -L build --keep-going "${INSTALLABLE:?}"

  build-and-push-containers:
    runs-on: ubuntu-latest

    permissions:
      packages: write

    needs:
      - cachix-pushfilter
      - gen-matrix

    strategy:
      fail-fast: false
      matrix:
        installable: ${{ fromJSON(needs.gen-matrix.outputs.containers) }}

    env:
      INSTALLABLE: ${{ matrix.installable }}

    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v30
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ github.repository_owner }}
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
          pushFilter: ${{ needs.cachix-pushfilter.outputs.regexp }}

      - name: build
        run: |
          nix -L build --keep-going "${INSTALLABLE:?}" "$INSTALLABLE.copyTo"

      - name: push to ghcr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          nix -L run .#push-to-registry

  success:
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs:
      - build-and-push-containers
      - flake-check
    steps:
      - name: success
        env:
          RESULTS: ${{ toJSON(needs.*.result) }}
        run: |-
          jq -e 'length > 0 and all(. == "success")' <<<"${RESULTS:?}"
