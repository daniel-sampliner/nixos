// SPDX-FileCopyrightText: 2025 Daniel Sampliner <samplinerD@gmail.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

const std = @import("std");

const Encoding = enum(u8) {
    Brotli,
    Zstd,
    Gzip,
    None = 8,
    _,

    const SeenEncodings = packed struct(u8) {
        brotli: bool = false,
        zstd: bool = false,
        gzip: bool = false,

        _: u5 = 0,

        fn preferred(self: SeenEncodings) Encoding {
            return @enumFromInt(@ctz(@as(u8, @bitCast(self))));
        }
    };

    fn parse(accept_encoding: []const u8) Encoding {
        var seen = SeenEncodings{};
        var it = std.mem.tokenizeAny(u8, accept_encoding, ", ");
        while (it.next()) |word| {
            if (std.mem.eql(u8, word, "br")) {
                seen.brotli = true;
            } else if (std.mem.eql(u8, word, "zstd")) {
                seen.zstd = true;
            } else if (std.mem.eql(u8, word, "gzip")) {
                seen.gzip = true;
            }
        }
        return seen.preferred();
    }

    test "parse" {
        const TestCase = struct {
            input: []const u8,
            want: Encoding,
        };

        const testCases: []const TestCase = &.{
            .{ .input = "br", .want = .Brotli },
            .{ .input = "zstd", .want = .Zstd },
            .{ .input = "gzip", .want = .Gzip },
            .{ .input = "br, gzip", .want = .Brotli },
            .{ .input = "gzip,br", .want = .Brotli },
            .{ .input = "zstd, br, gzip", .want = .Brotli },
            .{ .input = "", .want = .None },
            .{ .input = "who knows", .want = .None },
        };

        for (testCases) |tc| {
            const got = Encoding.parse(tc.input);
            try std.testing.expectEqual(tc.want, got);
        }
    }

    fn header(self: Encoding) []const u8 {
        return switch (self) {
            .Brotli => "br",
            .Zstd => "zstd",
            .Gzip => "gzip",
            else => "",
        };
    }

    fn preamble(self: Encoding) []const u8 {
        return switch (self) {
            .Brotli => &[_]u8{
                0xcf, 0xff, 0xff, 0x7f, 0xf8, 0xa5, 0x79, 0xc8,
                0xd2, 0xec, 0x54, 0x21, 0xa7, 0xd5, 0x01, 0xe6,
                0x58, 0x7c, 0xbd, 0xff, 0xc7, 0xc6, 0xff, 0xff,
                0x7f, 0xf8, 0x25, 0x00, 0xe2, 0xb0, 0x00, 0x40,
                0xf7, 0xfe, 0x9f, 0xff, 0xff, 0xff, 0xf0, 0x4b,
                0x00, 0xc4, 0x61, 0x01, 0x80, 0xee, 0xfd, 0x3f,
                0xff, 0xff, 0xff, 0xe1, 0x97, 0x00, 0x88, 0xc3,
                0x02, 0x00, 0xdd, 0xfb, 0x7f, 0xfe, 0xff, 0xff,
                0xc3, 0x2f, 0x01, 0x10, 0x87, 0x05, 0x00, 0xba,
                0xf7, 0xff, 0xfc, 0xff, 0xff, 0x87, 0x5f, 0x02,
                0x20, 0x0e, 0x0b, 0x00, 0x74, 0xef, 0xff, 0xf9,
                0xff, 0xff, 0x0f, 0xbf, 0x04, 0x40, 0x1c, 0x16,
                0x00, 0xe8, 0xde, 0xff, 0xf3, 0xff, 0xff, 0x1f,
                0x7e, 0x09, 0x80, 0x38, 0x2c, 0x00, 0xd0, 0xbd,
                0xff, 0xe7, 0xff, 0xff, 0x3f, 0xfc, 0x12, 0x00,
                0x71, 0x58, 0x00, 0xa0,
            },
            .Zstd => &[_]u8{
                0x28, 0xb5, 0x2f, 0xfd, 0x04, 0x60, 0x9c, 0x00,
                0x00, 0x58, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x3e,
                0x0a, 0x3c, 0x64, 0x69, 0x76, 0x01, 0x00, 0xf2,
                0xff, 0xc9, 0x8b, 0x17,
            },
            .Gzip => &[_]u8{
                0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x03, 0xec, 0xc4, 0xb1, 0x09, 0x00, 0x20,
                0x0c, 0x00, 0xb0, 0xdd, 0x9b, 0x8a, 0xd7, 0x38,
                0x54, 0xb0, 0x9b, 0x78, 0xbf, 0x87, 0x34, 0x19,
                0x12, 0x79, 0xeb, 0xcc, 0x11, 0x6b, 0x3f, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xcd, 0xff, 0xec,
                0xc4, 0x21, 0x01, 0x00, 0x00, 0x00, 0x80, 0xa0,
                0xff, 0xaf, 0x4d, 0xbe, 0x80, 0x80, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d,
            },
            else => &[_]u8{ '<', 'h', 't', 'm', 'l', '>', '\n' },
        };
    }

    fn chunk(self: Encoding) []const u8 {
        return switch (self) {
            .Brotli => &[_]u8{
                0x7b, 0xff, 0xcf, 0xff, 0xff, 0x7f, 0xf8, 0x25,
                0x00, 0xe2, 0xb0, 0x00, 0x40, 0xf7, 0xfe, 0x9f,
                0xff, 0xff, 0xff, 0xf0, 0x4b, 0x00, 0xc4, 0x61,
                0x01, 0x80, 0xee, 0xfd, 0x3f, 0xff, 0xff, 0xff,
                0xe1, 0x97, 0x00, 0x88, 0xc3, 0x02, 0x00, 0xdd,
                0xfb, 0x7f, 0xfe, 0xff, 0xff, 0xc3, 0x2f, 0x01,
                0x10, 0x87, 0x05, 0x00, 0xba, 0xf7, 0xff, 0xfc,
                0xff, 0xff, 0x87, 0x5f, 0x02, 0x20, 0x0e, 0x0b,
                0x00, 0x74, 0xef, 0xff, 0xf9, 0xff, 0xff, 0x0f,
                0xbf, 0x04, 0x40, 0x1c, 0x16, 0x00, 0xe8, 0xde,
                0xff, 0xf3, 0xff, 0xff, 0x1f, 0x7e, 0x09, 0x80,
                0x38, 0x2c, 0x00, 0xd0, 0xbd, 0xff, 0xe7, 0xff,
                0xff, 0x3f, 0xfc, 0x12, 0x00, 0x71, 0x58, 0x00,
                0xa0,
            } ** 40,
            .Zstd => &[_]u8{
                0x44, 0x00, 0x00, 0x00, 0x01, 0x00, 0xfd, 0xff,
                0xc9, 0x0b, 0x10,
            } ** 373,
            .Gzip => &[_]u8{
                0x7f, 0xec, 0xc4, 0x21, 0x01, 0x00, 0x00, 0x00,
                0x80, 0xa0, 0xff, 0xaf, 0x4d, 0xbe, 0x80, 0x80,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6,
                0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb,
                0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
                0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d,
            } ** 20,
            else => &[_]u8{ '<', 'd', 'i', 'v', '>', '\n' } ** 683,
        };
    }
};

pub fn deliver(writer: anytype, accept_encoding: ?[]const u8) !void {
    std.log.info("here comes the sun: {?s}", .{std.posix.getenv("HTTP_X_FORWARDED_FOR")});
    const encoding: Encoding = if (accept_encoding) |enc| Encoding.parse(enc) else .None;

    std.log.debug("encoding: {?s}", .{accept_encoding});
    std.log.debug("encoding: {}", .{encoding});

    try writer.print("Cache-Control: no-store, no-transform\n", .{});
    try writer.print("Content-Encoding: {s}\n", .{encoding.header()});
    try writer.print("\n", .{});

    const preamble, const chunk = .{ encoding.preamble(), encoding.chunk() };
    _ = try writer.write(preamble);
    while (true) {
        _ = try writer.write(chunk);
    }
}
